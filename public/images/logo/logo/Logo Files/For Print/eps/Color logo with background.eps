%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2394 2394
%%HiResBoundingBox: 0 0 2394 2394
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2394 2394 re
W
q
[0.24 0 0 -0.24 0 2394] cm
q
0 0 9975 9975 re
W*
q
[3.125 0 0 3.125 0 0] cm
/DeviceRGB {} CS
[1 0.7882 0.2353] SC
/DeviceRGB {} cs
[1 0.7882 0.2353] sc
0 0 3192 3192 re
f
Q
q
[187.50002 0 0 187.50002 300 300] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
50 25 m
50 25.409143 49.98996 25.818041 49.969883 26.226692 c
49.949806 26.635344 49.91972 27.043257 49.879616 27.45043 c
49.839512 27.857601 49.789444 28.263544 49.729412 28.668259 c
49.66938 29.072973 49.599453 29.475973 49.51963 29.877254 c
49.439808 30.278536 49.350193 30.677618 49.250778 31.074501 c
49.151367 31.471384 49.042278 31.865587 48.923508 32.257114 c
48.804737 32.64864 48.676434 33.037014 48.538597 33.422237 c
48.400761 33.807465 48.253555 34.189079 48.096981 34.567078 c
47.940407 34.94508 47.774658 35.319012 47.599728 35.688873 c
47.424797 36.058735 47.240898 36.424084 47.048031 36.784912 c
46.855164 37.145744 46.653557 37.501629 46.443214 37.852562 c
46.232868 38.203495 46.014042 38.549057 45.786736 38.889248 c
45.559429 39.229439 45.32391 39.56385 45.080181 39.892479 c
44.836456 40.221107 44.584816 40.543556 44.32526 40.859829 c
44.065701 41.176102 43.798538 41.485813 43.523777 41.788967 c
43.249008 42.092125 42.966972 42.388355 42.677666 42.677666 c
42.388355 42.966972 42.092125 43.249008 41.788967 43.523773 c
41.485813 43.798538 41.176102 44.065701 40.859829 44.32526 c
40.543556 44.584816 40.221107 44.836456 39.892479 45.080181 c
39.56385 45.32391 39.229439 45.559429 38.889248 45.786736 c
38.549057 46.014042 38.203495 46.232868 37.852562 46.443214 c
37.501629 46.653557 37.145744 46.855164 36.784912 47.048031 c
36.424084 47.240898 36.058735 47.424797 35.688873 47.599728 c
35.319012 47.774658 34.94508 47.940407 34.567078 48.096981 c
34.189079 48.253555 33.807465 48.400761 33.422237 48.538597 c
33.037014 48.676434 32.64864 48.804737 32.257114 48.923504 c
31.865587 49.042271 31.471384 49.15136 31.074501 49.250774 c
30.677618 49.350189 30.278536 49.439808 29.877254 49.519627 c
29.475973 49.599445 29.072973 49.669373 28.668259 49.729404 c
28.263544 49.78944 27.857599 49.839512 27.450428 49.879616 c
27.043257 49.91972 26.635344 49.949806 26.226692 49.969883 c
25.818041 49.98996 25.409143 50 25 50 c
24.590857 50 24.181959 49.98996 23.773308 49.969883 c
23.364656 49.949806 22.956745 49.91972 22.549572 49.879616 c
22.142397 49.839512 21.736452 49.789444 21.331736 49.729412 c
20.927021 49.66938 20.524023 49.599453 20.122742 49.51963 c
19.72146 49.439808 19.322378 49.350193 18.925495 49.250778 c
18.528612 49.151367 18.134409 49.042278 17.742882 48.923508 c
17.351355 48.804737 16.962978 48.676434 16.577751 48.538597 c
16.192526 48.400761 15.810913 48.253555 15.432914 48.096981 c
15.054915 47.940407 14.680984 47.774658 14.311122 47.599728 c
13.94126 47.424797 13.575913 47.240898 13.215082 47.048031 c
12.854249 46.855164 12.498365 46.653557 12.147431 46.443214 c
11.796497 46.232868 11.450934 46.014042 11.110744 45.786736 c
10.770553 45.559429 10.436144 45.32391 10.107516 45.080181 c
9.77889 44.836456 9.45644 44.584816 9.140168 44.32526 c
8.823896 44.065701 8.514181 43.798538 8.211026 43.523777 c
7.90787 43.249008 7.611638 42.966972 7.32233 42.677666 c
7.033022 42.388355 6.750986 42.092125 6.476222 41.788967 c
6.201458 41.485813 5.934297 41.176102 5.674739 40.859829 c
5.415181 40.543556 5.163538 40.221107 4.919812 39.892479 c
4.676084 39.56385 4.440567 39.229439 4.213259 38.889248 c
3.985951 38.549057 3.767126 38.203495 3.556784 37.852562 c
3.346442 37.501629 3.144837 37.145744 2.951968 36.784912 c
2.759099 36.424084 2.575199 36.058735 2.400267 35.688873 c
2.225336 35.319012 2.059584 34.94508 1.903011 34.567078 c
1.746439 34.189079 1.599235 33.807465 1.461398 33.422237 c
1.323562 33.037014 1.19526 32.64864 1.076492 32.257114 c
0.957723 31.865587 0.848632 31.471384 0.749219 31.074501 c
0.649805 30.677618 0.560188 30.278536 0.480368 29.877254 c
0.400548 29.475973 0.330621 29.072973 0.270587 28.668259 c
0.210553 28.263544 0.160485 27.857599 0.120382 27.450428 c
0.080279 27.043257 0.050189 26.635344 0.030114 26.226692 c
0.010038 25.818041 0 25.409143 0 25 c
0 24.590857 0.010038 24.181959 0.030114 23.773308 c
0.050189 23.364656 0.080279 22.956745 0.120382 22.549572 c
0.160485 22.142397 0.210553 21.736452 0.270587 21.331736 c
0.330621 20.927021 0.400548 20.524023 0.480368 20.122742 c
0.560188 19.72146 0.649805 19.322378 0.749219 18.925495 c
0.848632 18.528612 0.957723 18.134409 1.076491 17.742882 c
1.19526 17.351355 1.323562 16.962978 1.461398 16.577751 c
1.599234 16.192526 1.746439 15.810913 1.903011 15.432914 c
2.059584 15.054915 2.225336 14.680984 2.400267 14.311122 c
2.575199 13.94126 2.759099 13.575913 2.951968 13.215082 c
3.144837 12.854249 3.346442 12.498365 3.556784 12.147431 c
3.767126 11.796497 3.985951 11.450934 4.213259 11.110744 c
4.440567 10.770553 4.676084 10.436144 4.919811 10.107516 c
5.163538 9.77889 5.415181 9.45644 5.674739 9.140168 c
5.934297 8.823896 6.201458 8.514181 6.476222 8.211026 c
6.750986 7.90787 7.033022 7.611638 7.32233 7.32233 c
7.611638 7.033022 7.90787 6.750986 8.211026 6.476222 c
8.514181 6.201458 8.823895 5.934297 9.140167 5.674739 c
9.45644 5.415181 9.77889 5.163538 10.107516 4.919812 c
10.436143 4.676084 10.770552 4.440567 11.110743 4.213259 c
11.450934 3.985951 11.796495 3.767126 12.14743 3.556784 c
12.498363 3.346442 12.854248 3.144837 13.215081 2.951968 c
13.575913 2.759099 13.941259 2.575199 14.31112 2.400267 c
14.680983 2.225336 15.054913 2.059584 15.432912 1.903011 c
15.810911 1.746439 16.192524 1.599235 16.577749 1.461398 c
16.962978 1.323562 17.351355 1.19526 17.74288 1.076492 c
18.134407 0.957723 18.528612 0.848632 18.925495 0.749219 c
19.322376 0.649805 19.721458 0.560188 20.12274 0.480368 c
20.524021 0.400548 20.927021 0.330621 21.331736 0.270587 c
21.736452 0.210553 22.142397 0.160485 22.549572 0.120382 c
22.956745 0.080279 23.364656 0.050189 23.773308 0.030114 c
24.181959 0.010038 24.590857 0 25 0 c
25.409143 0 25.818041 0.010038 26.226692 0.030114 c
26.635344 0.050189 27.043257 0.080279 27.45043 0.120382 c
27.857601 0.160485 28.263544 0.210553 28.668259 0.270587 c
29.072973 0.330621 29.475973 0.400548 29.877254 0.480368 c
30.278536 0.560188 30.677618 0.649805 31.074501 0.749219 c
31.471384 0.848632 31.865587 0.957723 32.257114 1.076491 c
32.64864 1.19526 33.037014 1.323562 33.422237 1.461398 c
33.807465 1.599234 34.189079 1.746439 34.567078 1.903011 c
34.94508 2.059584 35.319012 2.225336 35.688873 2.400267 c
36.058735 2.575199 36.424084 2.759099 36.784912 2.951968 c
37.145744 3.144837 37.501629 3.346442 37.852562 3.556784 c
38.203495 3.767126 38.549057 3.985951 38.889248 4.213259 c
39.229439 4.440567 39.56385 4.676084 39.892479 4.919811 c
40.221107 5.163538 40.543556 5.415181 40.859829 5.674739 c
41.176102 5.934297 41.485813 6.201458 41.788967 6.476222 c
42.092125 6.750986 42.388355 7.033022 42.677666 7.32233 c
42.966972 7.611638 43.249008 7.90787 43.523773 8.211026 c
43.798538 8.514181 44.065701 8.823895 44.32526 9.140167 c
44.584816 9.45644 44.836456 9.77889 45.080181 10.107516 c
45.32391 10.436143 45.559429 10.770552 45.786736 11.110743 c
46.014042 11.450934 46.232868 11.796495 46.443214 12.14743 c
46.653557 12.498363 46.855164 12.854248 47.048031 13.215081 c
47.240898 13.575913 47.424797 13.941259 47.599728 14.31112 c
47.774658 14.680983 47.940407 15.054913 48.096981 15.432912 c
48.253555 15.810911 48.400761 16.192524 48.538597 16.577749 c
48.676434 16.962978 48.804737 17.351355 48.923504 17.74288 c
49.042271 18.134407 49.15136 18.528612 49.250774 18.925495 c
49.350189 19.322376 49.439808 19.721458 49.519627 20.12274 c
49.599445 20.524021 49.669373 20.927021 49.729404 21.331736 c
49.78944 21.736452 49.839512 22.142397 49.879616 22.549572 c
49.91972 22.956745 49.949806 23.364656 49.969883 23.773308 c
49.98996 24.181959 50 24.590857 50 25 c
h
f
Q
q
[103.208008 0 0 103.208008 3332.1873 2280.3484] cm
/DeviceRGB {} CS
[1 0.7882 0.2353] SC
/DeviceRGB {} cs
[1 0.7882 0.2353] sc
18.267 11 m
13.733 11 l
13.4 30.291 l
13.398 30.425001 13.448999 30.555 13.542999 30.651001 c
13.636999 30.746 13.765999 30.800001 13.9 30.800001 c
18.099998 30.800001 l
18.233999 30.800001 18.362999 30.746 18.456999 30.651001 c
18.550999 30.555 18.601999 30.425001 18.599998 30.291 c
18.266998 11 l
18.267 11 l
h
19.299999 4.4 m
19.299999 4.124 19.075998 3.9 18.799999 3.9 c
13.199999 3.9 l
12.923999 3.9 12.699999 4.124 12.699999 4.4 c
12.699999 10 l
12.699999 10.276 12.923999 10.5 13.199999 10.5 c
18.799999 10.5 l
19.076 10.5 19.299999 10.276 19.299999 10 c
19.299999 4.4 l
h
12.199999 4.786 m
12.199999 9.8 l
2.067999 9.8 l
1.749999 9.8 1.047999 9.389 1.700999 8.899 c
4.776999 6.592 8.403999 5.161 12.199999 4.786 c
h
19.799999 4.787 m
19.799999 9.8 l
30 9.8 l
30.215 9.8 30.406 9.662001 30.474001 9.458 c
30.542002 9.254 30.472 9.029 30.300001 8.900001 c
27.223001 6.593 23.597 5.162001 19.800001 4.787001 c
19.799999 4.787 l
h
13.749999 3.4 m
18.25 3.4 l
18.25 1.95 l
18.25 1.674 18.025999 1.45 17.75 1.45 c
14.25 1.45 l
13.974 1.45 13.75 1.674 13.75 1.95 c
13.75 3.4 l
13.749999 3.4 l
h
f
Q
q
[18.499104 0 0 18.499104 1977.7802 5860.9507] cm
/DeviceRGB {} CS
[1 0.7882 0.2353] SC
/DeviceRGB {} cs
[1 0.7882 0.2353] sc
6.4 11.44 m
10.92 30.880001 l
11 30.880001 l
15.96 11.440001 l
21.84 11.440001 l
26.720001 31.120001 l
26.800001 31.120001 l
31.480001 11.440001 l
37.639999 11.440001 l
29.959999 40 l
23.719999 40 l
18.879999 20.559999 l
18.799999 20.559999 l
14.039999 40 l
7.679999 40 l
0.119999 11.440001 l
6.399999 11.440001 l
6.4 11.44 l
h
58.57 11.44 m
69.25 40 l
62.73 40 l
60.57 33.639999 l
49.889999 33.639999 l
47.649998 40 l
41.289997 40 l
52.129997 11.440001 l
58.569996 11.440001 l
58.57 11.44 l
h
55.25 18.48 m
51.529999 28.959999 l
58.93 28.959999 l
55.330002 18.48 l
55.25 18.48 l
h
82.540001 11.44 m
82.540001 40 l
76.260002 40 l
76.260002 11.440001 l
82.540001 11.440001 l
82.540001 11.44 l
h
98.870003 11.44 m
98.870003 34.720001 l
112.790001 34.720001 l
112.790001 40 l
92.589996 40 l
92.589996 11.440001 l
98.869995 11.440001 l
98.870003 11.44 l
h
130.679993 10.76 m
134.173294 10.76 136.953186 11.560041 139.019989 13.16 c
141.086792 14.759959 142.119995 17.026699 142.119995 19.959999 c
136.039993 19.959999 l
135.959991 18.519999 135.473312 17.439999 134.579987 16.719999 c
133.686661 16 132.306686 15.639999 130.439987 15.639999 c
129.133286 15.639999 128.079987 15.92668 127.279984 16.5 c
126.47998 17.07332 126.079987 17.8666 126.079987 18.880001 c
126.079987 19.70668 126.326668 20.306702 126.819984 20.68 c
127.313301 21.053299 128.01329 21.386641 128.919983 21.67996 c
129.826675 21.97328 131.413376 22.39996 133.679977 22.959961 c
136.053284 23.54664 137.879974 24.186661 139.159973 24.879961 c
140.439972 25.573261 141.413269 26.459961 142.079971 27.539961 c
142.746674 28.619961 143.079971 29.946661 143.079971 31.51996 c
143.079971 33.33326 142.599976 34.94656 141.639969 36.359962 c
140.679962 37.773365 139.279968 38.846561 137.439972 39.579964 c
135.599976 40.313366 133.519974 40.679962 131.199966 40.679962 c
127.653267 40.679962 124.739967 39.793282 122.459969 38.019962 c
120.17997 36.246643 119.03997 33.813164 119.03997 30.719963 c
119.03997 30.519962 l
125.119972 30.519962 l
125.119972 32.199963 125.693291 33.499962 126.839973 34.419964 c
127.986656 35.339966 129.506668 35.799965 131.399979 35.799965 c
133.079971 35.799965 134.433273 35.499966 135.459976 34.899963 c
136.486679 34.299961 136.999969 33.413261 136.999969 32.239964 c
136.999969 31.466644 136.719971 30.813364 136.159973 30.279964 c
135.599976 29.746565 134.853271 29.313324 133.919968 28.979965 c
132.986664 28.646606 131.413361 28.226645 129.199966 27.719965 c
126.639969 27.079966 124.773163 26.399965 123.599968 25.679966 c
122.426773 24.959967 121.533371 24.086666 120.919968 23.059967 c
120.306564 22.033268 119.999969 20.799967 119.999969 19.359966 c
119.999969 17.573267 120.51329 16.013266 121.53997 14.679966 c
122.56665 13.346666 123.90667 12.359966 125.559967 11.719966 c
127.213264 11.079966 128.919968 10.759966 130.679962 10.759966 c
130.679993 10.76 l
h
154.970001 11.44 m
159.490005 30.880001 l
159.570007 30.880001 l
164.530014 11.440001 l
170.41002 11.440001 l
175.29002 31.120001 l
175.37003 31.120001 l
180.05002 11.440001 l
186.21002 11.440001 l
178.53003 40 l
172.29002 40 l
167.450027 20.559999 l
167.370026 20.559999 l
162.610031 40 l
156.250031 40 l
148.690033 11.440001 l
154.970032 11.440001 l
154.970001 11.44 l
h
207.14 11.44 m
217.82001 40 l
211.3 40 l
209.14 33.639999 l
198.45999 33.639999 l
196.21999 40 l
189.85999 40 l
200.69998 11.440001 l
207.13998 11.440001 l
207.14 11.44 l
h
203.82001 18.48 m
200.10001 28.959999 l
207.5 28.959999 l
203.89999 18.48 l
203.81999 18.48 l
203.82001 18.48 l
h
231.11 11.44 m
231.11 40 l
224.83 40 l
224.83 11.440001 l
231.11 11.440001 l
231.11 11.44 l
h
247.44 11.44 m
247.44 34.720001 l
261.36002 34.720001 l
261.36002 40 l
241.16002 40 l
241.16002 11.440001 l
247.44002 11.440001 l
247.44 11.44 l
h
290.76999 11.44 m
290.76999 16.719999 l
275.69 16.719999 l
275.69 22.84 l
289.53 22.84 l
289.53 27.720001 l
275.69 27.720001 l
275.69 34.720001 l
291.09 34.720001 l
291.09 40 l
269.41 40 l
269.41 11.440001 l
290.77002 11.440001 l
290.76999 11.44 l
h
315.26001 11.44 m
317.66 11.44 319.65359 12.179999 321.24002 13.66 c
322.82645 15.14 323.62003 17.026699 323.62003 19.32 c
323.62003 22.893299 322.11331 25.279999 319.10004 26.48 c
319.10004 26.559999 l
320.11334 26.853319 320.90665 27.34 321.48004 28.02 c
322.05344 28.700001 322.48663 29.493301 322.78003 30.400002 c
323.07343 31.306702 323.26004 32.760002 323.34003 34.760002 c
323.44672 37.373302 323.82004 39.120003 324.46002 40 c
318.18002 40 l
317.83334 39.119999 317.56665 37.466702 317.37997 35.040001 c
317.16666 32.48 316.69998 30.806801 315.97998 30.02 c
315.25998 29.2332 314.08667 28.84 312.45999 28.84 c
306.13998 28.84 l
306.13998 40 l
299.85999 40 l
299.85999 11.440001 l
315.25998 11.440001 l
315.26001 11.44 l
h
313.06 24.360001 m
314.39331 24.360001 315.44 24.060001 316.20001 23.460001 c
316.96002 22.860001 317.34003 21.800001 317.34003 20.280001 c
317.34003 18.84 316.96671 17.82 316.22003 17.220001 c
315.47336 16.620003 314.40665 16.320002 313.02002 16.320002 c
306.14001 16.320002 l
306.14001 24.360001 l
313.06003 24.360001 l
313.06 24.360001 l
h
f
Q
q
[22.188385 0 0 22.188385 2923.1372 7080.6265] cm
/DeviceRGB {} CS
[1 0.7882 0.2353] SC
/DeviceRGB {} cs
[1 0.7882 0.2353] sc
7.78 5.38 m
9.4467 5.38 10.8466 5.85 11.98 6.79 c
13.1134 7.73 13.7667 8.9734 13.94 10.520001 c
10.9 10.520001 l
10.79334 9.81334 10.44 9.22 9.84 8.740001 c
9.240001 8.260001 8.5533 8.020001 7.78 8.020001 c
6.5533 8.020001 5.6 8.46 4.92 9.34 c
4.24 10.22 3.9 11.413401 3.9 12.92 c
3.9 14.3867 4.24334 15.55 4.93 16.41 c
5.616661 17.27 6.5667 17.700001 7.78 17.700001 c
8.68666 17.700001 9.42 17.42334 9.980001 16.870001 c
10.540001 16.316662 10.886661 15.526701 11.020001 14.500001 c
14.06 14.500001 l
13.900001 16.313301 13.25 17.740002 12.110001 18.780001 c
10.970001 19.82 9.526601 20.34 7.780001 20.34 c
5.686601 20.34 3.993401 19.65 2.700001 18.27 c
1.406601 16.890001 0.760001 15.106601 0.760001 12.92 c
0.760001 10.7066 1.400001 8.896601 2.680001 7.49 c
3.960001 6.0834 5.660001 5.38 7.780001 5.38 c
7.78 5.38 l
h
23.9 5.72 m
25.1 5.72 26.0968 6.09 26.889999 6.83 c
27.683199 7.57 28.08 8.5133 28.08 9.66 c
28.08 11.4467 27.32666 12.639999 25.82 13.24 c
25.82 13.28 l
26.32666 13.42666 26.72332 13.67 27.01 14.01 c
27.29668 14.35 27.513321 14.74666 27.659981 15.200001 c
27.806641 15.653341 27.899981 16.380001 27.939981 17.380001 c
27.993322 18.686701 28.179981 19.560001 28.499981 20 c
25.359982 20 l
25.186642 19.559999 25.053301 18.733299 24.959961 17.52 c
24.8533 16.24 24.619961 15.4034 24.25996 15.01 c
23.89996 14.6166 23.313301 14.42 22.49996 14.42 c
19.33996 14.42 l
19.33996 20 l
16.199961 20 l
16.199961 5.72 l
23.89996 5.72 l
23.9 5.72 l
h
22.799999 12.18 m
23.46666 12.18 23.99 12.030001 24.369999 11.730001 c
24.749998 11.43 24.939999 10.900001 24.939999 10.14 c
24.939999 9.42 24.753338 8.91 24.379999 8.610001 c
24.00666 8.310001 23.47332 8.160001 22.779999 8.160001 c
19.339998 8.160001 l
19.339998 12.18 l
22.799999 12.18 l
h
31.879999 5.72 m
35.219997 11.36 l
38.539997 5.72 l
42.039997 5.72 l
36.739998 14.520001 l
36.739998 20 l
33.599998 20 l
33.599998 14.440001 l
28.339998 5.72 l
31.879997 5.72 l
31.879999 5.72 l
h
49.700001 5.72 m
51.220001 5.72 52.420002 6.13334 53.299999 6.96 c
54.179996 7.78666 54.619999 8.9 54.619999 10.3 c
54.619999 11.713301 54.18 12.83 53.299999 13.65 c
52.419998 14.469999 51.226601 14.879999 49.720001 14.879999 c
46.380001 14.879999 l
46.380001 20 l
43.240002 20 l
43.240002 5.72 l
49.700001 5.72 l
49.700001 5.72 l
h
48.880001 12.44 m
49.786659 12.44 50.463303 12.273339 50.91 11.94 c
51.356697 11.60666 51.579998 11.06 51.579998 10.299999 c
51.579998 9.566659 51.363338 9.026699 50.929996 8.679999 c
50.496655 8.3333 49.819996 8.16 48.899998 8.16 c
46.379997 8.16 l
46.379997 12.440001 l
48.879997 12.440001 l
48.880001 12.44 l
h
67.160004 5.72 m
67.160004 8.36 l
62.880005 8.36 l
62.880005 20 l
59.740005 20 l
59.740005 8.36 l
55.460007 8.36 l
55.460007 5.719999 l
67.160004 5.719999 l
67.160004 5.72 l
h
75.199997 5.38 m
77.306595 5.38 79.003395 6.08 80.289993 7.48 c
81.576591 8.88 82.219994 10.6934 82.219994 12.92 c
82.219994 15.0934 81.573334 16.8734 80.279991 18.26 c
78.986649 19.646601 77.293388 20.34 75.199989 20.34 c
73.093391 20.34 71.396591 19.64666 70.109985 18.26 c
68.82338 16.873341 68.179985 15.0934 68.179985 12.92 c
68.179985 10.7066 68.826645 8.896601 70.119987 7.49 c
71.41333 6.0834 73.10659 5.38 75.199989 5.38 c
75.199997 5.38 l
h
71.32 12.92 m
71.32 14.360001 71.659981 15.5166 72.339996 16.389999 c
73.020012 17.263399 73.973297 17.699999 75.199997 17.699999 c
76.399994 17.699999 77.346596 17.269999 78.039993 16.41 c
78.733391 15.550001 79.079994 14.3866 79.079994 12.92 c
79.079994 11.3867 78.736656 10.1866 78.049995 9.32 c
77.363335 8.4534 76.406693 8.02 75.179993 8.02 c
73.979996 8.02 73.036591 8.45334 72.349991 9.32 c
71.663391 10.18666 71.319992 11.3866 71.319992 12.92 c
71.32 12.92 l
h
91.480003 5.72 m
96.820007 20 l
93.560005 20 l
92.480003 16.82 l
87.139999 16.82 l
86.019997 20 l
82.839996 20 l
88.259995 5.72 l
91.479996 5.72 l
91.480003 5.72 l
h
89.82 9.24 m
87.959999 14.48 l
91.659996 14.48 l
89.859993 9.24 l
89.819992 9.24 l
89.82 9.24 l
h
104.459999 5.38 m
106.126701 5.38 107.526596 5.85 108.659996 6.79 c
109.793396 7.73 110.446693 8.9734 110.619995 10.520001 c
107.579994 10.520001 l
107.473335 9.81334 107.119995 9.22 106.519997 8.740001 c
105.919998 8.260001 105.233299 8.020001 104.459999 8.020001 c
103.233299 8.020001 102.279999 8.46 101.599998 9.34 c
100.919998 10.22 100.580002 11.413401 100.580002 12.92 c
100.580002 14.3867 100.92334 15.55 101.610001 16.41 c
102.296661 17.27 103.246704 17.700001 104.459999 17.700001 c
105.366661 17.700001 106.099998 17.42334 106.659996 16.870001 c
107.219994 16.316662 107.566658 15.526701 107.699997 14.500001 c
110.739998 14.500001 l
110.579994 16.313301 109.93 17.740002 108.790001 18.780001 c
107.650002 19.82 106.206604 20.34 104.459999 20.34 c
102.3666 20.34 100.673401 19.65 99.379997 18.27 c
98.086594 16.890001 97.439995 15.106601 97.439995 12.92 c
97.439995 10.7066 98.079994 8.896601 99.359993 7.49 c
100.639992 6.0834 102.339996 5.38 104.459991 5.38 c
104.459999 5.38 l
h
120 5.72 m
125.339996 20 l
122.079994 20 l
120.999992 16.82 l
115.659988 16.82 l
114.539986 20 l
111.359985 20 l
116.779984 5.72 l
119.999985 5.72 l
120 5.72 l
h
118.339996 9.24 m
116.479996 14.48 l
120.179993 14.48 l
118.37999 9.24 l
118.339989 9.24 l
118.339996 9.24 l
h
132.699997 5.72 m
134.726593 5.72 136.319992 6.34666 137.479996 7.6 c
138.639999 8.85334 139.220001 10.58 139.220001 12.78 c
139.220001 15.06 138.636658 16.833401 137.470001 18.1 c
136.303345 19.3666 134.740005 20 132.779999 20 c
126.580002 20 l
126.580002 5.72 l
132.699997 5.72 l
132.699997 5.72 l
h
132.5 17.360001 m
133.633301 17.360001 134.513397 16.98666 135.139999 16.24 c
135.766602 15.49334 136.080002 14.4333 136.080002 13.06 c
136.080002 11.486699 135.743347 10.31 135.070007 9.53 c
134.396667 8.75 133.360001 8.36 131.960007 8.36 c
129.720001 8.36 l
129.720001 17.360001 l
132.5 17.360001 l
h
152.080002 5.72 m
152.080002 8.36 l
144.540009 8.36 l
144.540009 11.42 l
151.460007 11.42 l
151.460007 13.860001 l
144.540009 13.860001 l
144.540009 17.360001 l
152.240005 17.360001 l
152.240005 20 l
141.400009 20 l
141.400009 5.72 l
152.080017 5.72 l
152.080002 5.72 l
h
158.779999 5.72 m
162.119995 15.539999 l
162.159988 15.539999 l
165.319992 5.719999 l
169.73999 5.719999 l
169.73999 20 l
166.799988 20 l
166.799988 9.88 l
166.759995 9.88 l
163.259995 20 l
160.839996 20 l
157.339996 9.98 l
157.300003 9.98 l
157.300003 20 l
154.360001 20 l
154.360001 5.72 l
158.779999 5.72 l
158.779999 5.72 l
h
174.48 5.72 m
177.81999 11.36 l
181.14 5.72 l
184.64 5.72 l
179.34 14.520001 l
179.34 20 l
176.2 20 l
176.2 14.440001 l
170.94 5.72 l
174.48 5.72 l
174.48 5.72 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
